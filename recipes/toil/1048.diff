diff --git a/src/toil/batchSystems/singleMachine.py b/src/toil/batchSystems/singleMachine.py
index 86b2ad6..b975ffc 100644
--- src/toil/batchSystems/singleMachine.py
+++ src/toil/batchSystems/singleMachine.py
@@ -120,6 +120,33 @@ def __init__(self, config, maxCores, maxMemory, maxDisk):
             self.workerThreads.append(worker)
             worker.start()
 
+    def _getDebugCmd(self, jobCommand):
+        """Calculate useful debugging command line, handling CWL runs.
+
+        Tries to print out underlying CWL base command being run if possible,
+        otherwise defaulting to the toil jobCommand.
+        """
+        debug_cmd = jobCommand
+        cmd_args = jobCommand.split()
+        if len(cmd_args) == 3 and cmd_args[0] == "_toil_worker":
+            _, job_store_locator, job_store_id = cmd_args
+            if job_store_locator.startswith("file:") or os.path.exists(job_store_locator):
+                import cPickle
+                import marshal as pickler
+                job_store_locator = job_store_locator.replace("file:", "")
+                job_cmd_file = os.path.join(job_store_locator, "tmp", job_store_id, "job")
+                with open(job_cmd_file) as in_handle:
+                    job = pickler.load(in_handle)
+                if job.get("command"):
+                    command_parts = job["command"].split()
+                    input_pickle_file = os.path.join(job_store_locator, "tmp", command_parts[1])
+                    with open(input_pickle_file) as in_handle:
+                        input = cPickle.load(in_handle)
+                    if (hasattr(input, "cwltool") and hasattr(input.cwltool, "tool")
+                            and "baseCommand" in input.cwltool.tool):
+                        debug_cmd = " ".join(input.cwltool.tool["baseCommand"])
+        return debug_cmd
+
     # Note: The input queue is passed as an argument because the corresponding attribute is reset
     # to None in shutdown()
 
@@ -141,7 +168,7 @@ def worker(self, inputQueue):
                                   jobCores)
                         with self.coreFractions.acquisitionOf(coreFractions):
                             with self.disk.acquisitionOf(jobDisk):
-                                log.info("Executing command: '%s'.", jobCommand)
+                                log.info("Executing command: '%s'.", self._getDebugCmd(jobCommand))
                                 startTime = time.time() #Time job is started
                                 with self.popenLock:
                                     popen = subprocess.Popen(jobCommand,
